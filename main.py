import spotipy, os, json
from dotenv import load_dotenv
from spotipy.oauth2 import SpotifyOAuth
from datetime import date

"""
Notes:

A simple script designed to backup the contents of all my massive Spotify playlists and throw them into a JSON file
    named after the date the backup was made in case the service goes down or I somehow loose access to it.
Because 'current_user_playlists()' has a hard limit at "limit=50" that function isn't able to grab every playlist you 
have in a single go.
    EDIT: Unless you use the offset key to move through the playlists in sets of 50.
    Similarly. If you have a playlist with hundreds and hundreds of sounds, this script probably won't get every song.
Occasionally a NoneType value will appear in the list generated by 'current_user_playlists()'.
"""

load_dotenv()

# Create the big, important spotipy client
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
    client_id=os.getenv('SPOTIPY_CLIENT_ID'),
    client_secret=os.getenv('SPOTIPY_CLIENT_SECRET'),
    redirect_uri=os.getenv('SPOTIPY_REDIRECT_URI'),
    username=os.getenv("USERNAME"),
    scope='playlist-read-private playlist-read-collaborative user-read-private', #Pubic/private playlists & user data
    cache_path="token.txt",
    show_dialog=True,
))

def get_playlists() -> dict:
    """Get a user's playlists"""
    playlist_data = [] # A list of dicts containing playlists with
    playlists = [] # Store playlists between each 'offset' loop
    others_playlists = [] # Store the playlist playlists you follow
    running_offset = 0
    my_owner_display_name = sp.current_user().get('display_name', 'Unknown User') # Used to ignore 3rd-party playlists

    # Loop through your playlists in sets of 50
    while True:
        temp_playlists = sp.current_user_playlists(limit=50, offset=running_offset)  # Hard limit at 50, but you can use 'offset' to get more
        playlists.extend(temp_playlists['items'])

        # Check if there's any more playlists left, if so offset forward
        if temp_playlists['next']:
            running_offset += 50
        else:
            break
    print(f"Looks like you have {len(playlists)} playlists to backup")

    # Loop through the playlists to get their songs' info
    for playlist in playlists:
        if playlist is not None:
            print(f"Found playlist: {playlist['name']} ", end='')
            playlist_name = playlist['name']
            playlist_id = playlist['id']
            playlist_owner = playlist['owner']['display_name']

            if playlist_owner == my_owner_display_name: #Record your playlists
                playlist_data.append({
                    'name': playlist_name,
                    'tracks': get_playlist_tracks(playlist_id)
                })
                print("♪")
            else:                                                           # Record the playlists you follow
                others_playlists.append({
                    'name': playlist_name,
                    'owner': playlist_owner,
                    'id': playlist_id,
                    'tracks': get_playlist_tracks(playlist_id)
                })
                print("♫ (Not your playlist)")
        else:
            print(f'Found a NoneType playlist')
    return {
        'data': {
            'your_playlists': playlist_data,
            'others_playlists': others_playlists
        }
    }

def get_playlist_tracks(playlist_id) -> list:
    """Get the all tracks within a playlist and return them as a list of dictionaries"""
    results = sp.playlist_items(playlist_id)
    tracks = []

    while results:
        for item in results['items']:
            track = item['track']
            tracks.append({
                'name': track['name'],
                'artist': ', '.join([artist['name'] for artist in track['artists']]),
                'album': track['album']['name'],
                'uri': track['uri'] # Useful to hang onto incase you need to rebuild a playlist using Spotipy
            })
        results = sp.next(results)
    print(f" - {len(tracks)} Songs - ", end='')
    return tracks

def main():
    print(f"Getting the playlists for user '{sp.current_user()['id']}'...")
    all_playlists = get_playlists()

    filename = f"spotify_backup_{date.today()}.json"
    print(f"{'- '*20}\nWriting to {filename}...")
    with open(filename, 'w') as file:
        file.write(json.dumps(all_playlists, indent=1))


if __name__ == '__main__':
    main()
