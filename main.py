import spotipy, os, json
from dotenv import load_dotenv
from spotipy.oauth2 import SpotifyOAuth
from datetime import date

"""
Notes:

A simple script designed to backup the contents of all my massive Spotify playlists and throw them into a JSON file
    named after the date the backup was made in case the service goes down or I somehow loose access to it.
For some reason 'current_user_playlists()' doesn't appear to grab every single playlist.
Occasionally a NoneType value will appear in the list generated by 'current_user_playlists()'
"""

load_dotenv()

# Create the big, important spotipy client
sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
    client_id=os.getenv('SPOTIPY_CLIENT_ID'),
    client_secret=os.getenv('SPOTIPY_CLIENT_SECRET'),
    redirect_uri=os.getenv('SPOTIPY_REDIRECT_URI'),
    username=os.getenv("USERNAME"),
    scope='playlist-read-private playlist-read-collaborative user-read-private', #Pubic/private playlists & user data
    cache_path="token.txt",
    show_dialog=True,
))

def get_playlists() -> dict:
    """Get a user's playlists"""
    playlists = sp.current_user_playlists()
    playlist_data = [] # A list of dicts containing playlists with
    my_owner_display_name = sp.current_user().get('display_name', 'Unknown User')

    print(f"Looking at {len(playlist_data)} playlists")
    for playlist in playlists['items']:
        if playlist is not None:
            print(f"Found playlist: {playlist['name']}", end='')
            #print(f"\t{playlist}")
            if playlist['owner']['display_name'] == my_owner_display_name: #Exclude the playlists from others you follow
                playlist_data.append({
                    'name': playlist['name'],
                    'tracks': get_playlist_tracks(playlist['id'])
                })
                print(" ✔")
            else:
                print(" ✘ (Not your playlist)")
        else:
            print(f'Found a NoneType playlist')
    return {'data': playlist_data}

# Fetch tracks from a playlist
def get_playlist_tracks(playlist_id) -> list:
    """Get the tracks within a playlist and return them as a list of dictionaries"""
    results = sp.playlist_items(playlist_id)
    tracks = []

    while results:
        for item in results['items']:
            track = item['track']
            tracks.append({
                'name': track['name'],
                'artist': ', '.join([artist['name'] for artist in track['artists']]),
                'album': track['album']['name'],
                'uri': track['uri']
            })
        results = sp.next(results)
    return tracks

def main():
    print(f"Getting the playlists for user '{sp.current_user()['id']}'...")
    all_playlists = get_playlists()

    filename = f"spotify_backup_{date.today()}.json"
    print(f"{'- '*20}\nWriting to {filename}...")
    with open(filename, 'w') as file:
        file.write(json.dumps(all_playlists, indent=1))


if __name__ == '__main__':
    main()
